# Generated by Django 5.1.6 on 2025-04-19 06:21

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('characters', '0004_characterclass_characterclassprogress_classlevel'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="Short tag, e.g. 'WZ11A'", max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('has_options', models.BooleanField(default=False, help_text='If true, user must pick one of the options')),
                ('option_labels', models.JSONField(blank=True, default=list, help_text='If has_options, list of option-strings')),
            ],
        ),
        migrations.CreateModel(
            name='ProficiencyTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('bonus', models.IntegerField(help_text='e.g. +2 for Expert')),
            ],
        ),
        migrations.AlterModelOptions(
            name='classlevel',
            options={'ordering': ['character_class', 'level']},
        ),
        migrations.RemoveField(
            model_name='classlevel',
            name='proficiency_tier',
        ),
        migrations.AddField(
            model_name='characterclass',
            name='hit_die',
            field=models.PositiveSmallIntegerField(choices=[(4, 'd4'), (6, 'd6'), (8, 'd8'), (10, 'd10'), (12, 'd12')], default=8, help_text="Your class's Hit Die."),
        ),
        migrations.RemoveField(
            model_name='classlevel',
            name='features',
        ),
        migrations.CreateModel(
            name='ClassLevelFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chosen_option', models.CharField(blank=True, help_text='One of the option_labels on the feature', max_length=100)),
                ('class_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.classlevel')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.classfeature')),
            ],
            options={
                'unique_together': {('class_level', 'feature')},
            },
        ),
        migrations.AddField(
            model_name='classlevel',
            name='features',
            field=models.ManyToManyField(help_text='All of the features (and choices) you get at this level', through='characters.ClassLevelFeature', to='characters.classfeature'),
        ),
        migrations.CreateModel(
            name='ClassProficiencyProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_type', models.CharField(choices=[('armor', 'Armor'), ('dodge', 'Dodge'), ('perception', 'Perception'), ('initiative', 'Initiative'), ('dc', 'Spell/DC'), ('reflex', 'Reflex Save'), ('fortitude', 'Fortitude Save'), ('will', 'Will Save'), ('weapon', 'Weapon')], max_length=20)),
                ('at_level', models.PositiveIntegerField(help_text='Level at which this proficiency tier becomes active')),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prof_progress', to='characters.characterclass')),
                ('tier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='characters.proficiencytier')),
            ],
            options={
                'ordering': ['character_class', 'proficiency_type', 'at_level'],
                'unique_together': {('character_class', 'proficiency_type', 'at_level')},
            },
        ),
    ]
