# Generated by Django 5.1.6 on 2025-04-20 16:33

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('characters', '0015_alter_classfeature_feat_type_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.AlterField(
            model_name='classfeature',
            name='feat_type',
            field=models.CharField(choices=[('Class Trait', 'Class Trait'), ('class', 'Class feat'), ('skill', 'Skill feat'), ('Martial Mastery', 'Martial Mastery')], default='class', help_text='Type of trait', max_length=100),
        ),
        migrations.CreateModel(
            name='ClassSubclass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(blank=True, help_text='Optional shorthand code for this subclass', max_length=20)),
                ('base_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subclasses', to='characters.characterclass')),
            ],
            options={
                'unique_together': {('base_class', 'name')},
            },
        ),
        migrations.AddField(
            model_name='classfeature',
            name='subclasses',
            field=models.ManyToManyField(blank=True, help_text='If empty, this feature applies to the base class. Otherwise only to the selected subclass(es).', related_name='features', to='characters.classsubclass'),
        ),
        migrations.AddField(
            model_name='characterclass',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='High‑level archetype tags (e.g. Martial, Spellcaster…)', related_name='classes', to='characters.classtag'),
        ),
    ]
